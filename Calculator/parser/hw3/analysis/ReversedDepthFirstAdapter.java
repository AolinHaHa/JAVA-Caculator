/* This file was generated by SableCC (http://www.sablecc.org/). */

package hw3.analysis;

import java.util.*;
import hw3.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExprList().apply(this);
        outStart(node);
    }

    public void inANoneExprList(ANoneExprList node)
    {
        defaultIn(node);
    }

    public void outANoneExprList(ANoneExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneExprList(ANoneExprList node)
    {
        inANoneExprList(node);
        outANoneExprList(node);
    }

    public void inASomeExprList(ASomeExprList node)
    {
        defaultIn(node);
    }

    public void outASomeExprList(ASomeExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomeExprList(ASomeExprList node)
    {
        inASomeExprList(node);
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outASomeExprList(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAMulTerm(AMulTerm node)
    {
        defaultIn(node);
    }

    public void outAMulTerm(AMulTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulTerm(AMulTerm node)
    {
        inAMulTerm(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMulTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivTerm(node);
    }

    public void inAAtomTerm(AAtomTerm node)
    {
        defaultIn(node);
    }

    public void outAAtomTerm(AAtomTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomTerm(AAtomTerm node)
    {
        inAAtomTerm(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAAtomTerm(node);
    }

    public void inANumberAtom(ANumberAtom node)
    {
        defaultIn(node);
    }

    public void outANumberAtom(ANumberAtom node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberAtom(ANumberAtom node)
    {
        inANumberAtom(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberAtom(node);
    }

    public void inAParenAtom(AParenAtom node)
    {
        defaultIn(node);
    }

    public void outAParenAtom(AParenAtom node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenAtom(AParenAtom node)
    {
        inAParenAtom(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenAtom(node);
    }
}
